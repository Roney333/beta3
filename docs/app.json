[{"name":"app.R","content":"# ========================================================================\r\n# APLICAÇÃO SHINY PARA PROCESSAMENTO DE PDF DE PESQUISA DE PREÇO\r\n# VERSÃO FINAL COM VALIDAÇÃO DE ARQUIVO E NOTIFICAÇÃO\r\n# ========================================================================\r\n\r\n# --- 1. Carregar Todas as Bibliotecas Necessárias ---\r\nlibrary(shiny)\r\nlibrary(stringr)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(openxlsx)\r\nlibrary(bslib)\r\nlibrary(base64enc)\r\nlibrary(shinyjs)\r\nlibrary(Cairo)\r\n\r\n# --- AUMENTAR LIMITE DE UPLOAD PARA 100MB ---\r\noptions(shiny.maxRequestSize = 100 * 1024^2)\r\n\r\n# =============================================================================\r\n# FUNÇÕES GLOBAIS E DE UTILIDADE\r\n# =============================================================================\r\nparse_br_number <- function(s_vector) {\r\n  if (is.null(s_vector)) return(NA_real_)\r\n  s_vector[is.na(s_vector)] <- \"\"\r\n  \r\n  s_cleaned <- str_remove_all(s_vector, \"[R$\\\\s]\")\r\n  has_comma <- str_detect(s_cleaned, \",\")\r\n  \r\n  s_cleaned[has_comma] <- str_replace(\r\n    str_remove_all(s_cleaned[has_comma], \"\\\\.\"),\r\n    \",\", \".\"\r\n  )\r\n  \r\n  no_comma <- !has_comma\r\n  if(any(no_comma)) {\r\n    num_dots <- str_count(s_cleaned[no_comma], \"\\\\.\")\r\n    needs_dot_removal <- num_dots > 1\r\n    if(any(needs_dot_removal)) {\r\n      s_cleaned[no_comma][needs_dot_removal] <- str_remove_all(s_cleaned[no_comma][needs_dot_removal], \"\\\\.\")\r\n    }\r\n  }\r\n  \r\n  return(suppressWarnings(as.numeric(s_cleaned)))\r\n}\r\n\r\nformat_currency_br <- function(x, accuracy = 0.01) {\r\n  sapply(x, function(val) {\r\n    if (is.na(val) || !is.numeric(val)) {\r\n      return(\"N/A\")\r\n    }\r\n    paste0(\"R$ \", format(round(val, 2), nsmall = 2, big.mark = \".\", decimal.mark = \",\", trim = TRUE, scientific = FALSE))\r\n  })\r\n}\r\n\r\nget_pdf_text_pages <- function(local_path, webr_pages) {\r\n  if (!is.null(webr_pages) && length(webr_pages) > 0) {\r\n    return(webr_pages)\r\n  }\r\n  if (requireNamespace(\"pdftools\", quietly = TRUE)) {\r\n    return(pdftools::pdf_text(local_path))\r\n  }\r\n  stop(\"Nenhum mecanismo de leitura de PDF disponível.\")\r\n}\r\n\r\n\r\n# ===================================================================================\r\n# LÓGICA DE EXTRAÇÃO DE DADOS (Inalterada)\r\n# ===================================================================================\r\nextract_format_AB <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  \r\n  line_start_regex <- \"^\\\\s*(\\\\d+)\\\\s+(I|II|III|IV)\\\\s+(.*)$\"\r\n  \r\n  processed_line_regex <- \"^(?:(.*?)\\\\s+)?([\\\\d,]+)\\\\s*(.*)$\"\r\n  item_start_detector_regex <- \"^\\\\s*[Ii]tem:?\\\\s+\\\\d+\"\r\n  \r\n  quote_indices <- which(str_detect(all_lines, line_start_regex))\r\n  \r\n  header_indices <- which(str_detect(all_lines, \"Nº\\\\s+Inciso\\\\s+Nome\"))\r\n  quote_indices <- setdiff(quote_indices, header_indices)\r\n  \r\n  for (i in quote_indices) {\r\n    line <- all_lines[i]\r\n    \r\n    base_match <- str_match(line, line_start_regex)\r\n    if(is.na(base_match[1,1])) next\r\n    \r\n    n_cotacao <- base_match[1, 2]\r\n    inciso_val <- base_match[1, 3]\r\n    rest_of_line <- str_squish(base_match[1, 4])\r\n    \r\n    preco_match <- str_match(rest_of_line, \"(R\\\\$\\\\s*[\\\\d.,]+)\")\r\n    preco_unitario_str <- if (!is.na(preco_match[1,1])) preco_match[1,1] else NA_character_\r\n    \r\n    data_match <- str_match(rest_of_line, \"([0-9]{2}/[0-9]{2}/[0-9]{4})\")\r\n    data_cotacao <- if (!is.na(data_match[1,1])) data_match[1,1] else NA_character_\r\n    \r\n    compone_match <- str_match(rest_of_line, \"\\\\b(Sim|N.o|Não)\\\\b\")\r\n    compone <- if (!is.na(compone_match[1,1])) str_replace(compone_match[1,1], \"N.o\", \"Não\") else \"Sim\"\r\n    \r\n    line_for_processing <- rest_of_line\r\n    if (!is.na(preco_unitario_str)) line_for_processing <- str_remove(line_for_processing, fixed(preco_unitario_str))\r\n    if (!is.na(data_cotacao)) line_for_processing <- str_remove(line_for_processing, fixed(data_cotacao))\r\n    if (!is.na(compone_match[1,1])) line_for_processing <- str_remove(line_for_processing, paste0(\"\\\\b\", compone_match[1,1], \"\\\\b\"))\r\n    line_for_processing <- str_squish(line_for_processing)\r\n    \r\n    match_data <- str_match(line_for_processing, processed_line_regex)\r\n    \r\n    nome_na_linha <- \"\"\r\n    quantidade <- \"\"\r\n    unidade <- \"\"\r\n    \r\n    if (!is.na(match_data[1, 1])) {\r\n      nome_na_linha <- str_trim(match_data[1, 2])\r\n      quantidade <- match_data[1, 3]\r\n      unidade <- str_trim(match_data[1, 4])\r\n    }\r\n    \r\n    if (is.na(nome_na_linha)) nome_na_linha <- \"\"\r\n    \r\n    if (str_detect(str_trim(nome_na_linha), \"^[\\\\d.,]+\\\\s+[A-Za-z]\")) {\r\n      nome_na_linha <- \"\"\r\n    }\r\n    \r\n    if (is.na(unidade)) unidade <- \"\"\r\n    if (!is.na(quantidade) && str_detect(quantidade, \"\\\\.\")) {\r\n      unidade <- str_squish(paste(quantidade, unidade))\r\n      quantidade <- \"\"\r\n    }\r\n    if (!is.na(unidade)) {\r\n      unidade <- str_remove(unidade, \"\\\\s*\\\\d{2,}\\\\.\\\\d{3,}.*\")\r\n      unidade <- str_remove(unidade, \"\\\\s*/\\\\d{4,}.*\")\r\n      unidade <- str_squish(unidade)\r\n    }\r\n    \r\n    nome_partes_superiores <- c()\r\n    for (j in (i - 1):max(1, i - 5)) {\r\n      prev_line <- all_lines[j]\r\n      if (str_detect(prev_line, \"Nº\\\\s+Inciso\\\\s+Nome\") || str_detect(prev_line, line_start_regex) || str_detect(prev_line, \"Id da Compra|Data da Cotação\")) {\r\n        break\r\n      }\r\n      nome_partes_superiores <- c(str_squish(prev_line), nome_partes_superiores)\r\n    }\r\n    nome_partes_inferiores <- c()\r\n    for (k in (i + 1):min(length(all_lines), i + 5)) {\r\n      next_line <- all_lines[k]\r\n      if (str_detect(next_line, \"Id da Compra|Data da Cotação|Fornecedor:|Esfera|Critério Julgamento Item\") || str_detect(next_line, \"^\\\\s*Nº\\\\s+Inciso\") || str_detect(next_line, line_start_regex) || str_detect(next_line, item_start_detector_regex)) {\r\n        break\r\n      }\r\n      nome_partes_inferiores <- c(nome_partes_inferiores, str_squish(next_line))\r\n    }\r\n    nome_completo <- str_squish(paste(paste(nome_partes_superiores, collapse = \" \"), nome_na_linha, paste(nome_partes_inferiores, collapse = \" \"), collapse = \" \"))\r\n    if (nchar(nome_completo) > 0 && !str_detect(nome_completo, \"Compras\\\\.gov\\\\.br\")) {\r\n      nome_completo <- paste(nome_completo, \"- Compras.gov.br\")\r\n    }\r\n    nome_completo <- str_remove(nome_completo, \"^-\") %>% str_squish()\r\n    \r\n    preco_numerico <- parse_br_number(preco_unitario_str)\r\n    \r\n    preco_formatado <- if (!is.na(preco_numerico)) {\r\n      str_replace(sprintf(\"%.2f\", preco_numerico), \"\\\\.\", \",\")\r\n    } else {\r\n      preco_unitario_str\r\n    }\r\n    \r\n    endereco_eletronico <- NA_character_\r\n    anexo <- NA_character_\r\n    \r\n    next_quote_line_idx <- length(all_lines) + 1\r\n    if (i < length(all_lines)) {\r\n      following_quotes <- which(str_detect(all_lines[(i + 1):length(all_lines)], line_start_regex))\r\n      if (length(following_quotes) > 0) {\r\n        next_quote_line_idx <- i + following_quotes[1]\r\n      }\r\n    }\r\n    \r\n    cotacao_uasg <- NA_character_\r\n    if (!inciso_val %in% c(\"III\", \"IV\")) {\r\n      search_lines_uasg <- all_lines[i:(next_quote_line_idx - 1)]\r\n      uasg_header_line_idx <- which(str_detect(search_lines_uasg, \"Esfera\") & str_detect(search_lines_uasg, \"UASG\"))\r\n      if (length(uasg_header_line_idx) > 0) {\r\n        idx_in_window <- uasg_header_line_idx[1]\r\n        if (idx_in_window + 1 <= length(search_lines_uasg)) {\r\n          next_line <- search_lines_uasg[idx_in_window + 1]\r\n          uasg_match <- str_match(next_line, \"(\\\\d{5,6})\")\r\n          if (!is.na(uasg_match[1, 2])) {\r\n            cotacao_uasg <- uasg_match[1, 2]\r\n          }\r\n        }\r\n      }\r\n      if (is.na(cotacao_uasg)) {\r\n        search_block_text <- paste(search_lines_uasg, collapse = \" \")\r\n        uasg_fallback_match <- str_match(search_block_text, \"UASG\\\\s*:?\\\\s*(\\\\d{5,6})\")\r\n        if (!is.na(uasg_fallback_match[1, 2])) {\r\n          cotacao_uasg <- uasg_fallback_match[1, 2]\r\n        }\r\n      }\r\n    }\r\n    \r\n    search_window_start <- i + 1\r\n    search_window_end <- min(next_quote_line_idx - 1, length(all_lines))\r\n    if (search_window_start <= search_window_end) {\r\n      search_lines <- all_lines[search_window_start:search_window_end]\r\n      search_block_original_layout <- paste(search_lines, collapse = \" \\n \")\r\n      anexo_match <- str_match(search_block_original_layout, \"([\\\\w\\\\s.-]+\\\\.(?i)(pdf|png|jpeg|jpg))\")\r\n      if (!is.na(anexo_match[1, 1])) {\r\n        anexo <- str_squish(anexo_match[1, 1])\r\n      }\r\n      if (str_detect(search_block_original_layout, \"https?://\")) {\r\n        url_block <- search_block_original_layout\r\n        if (!is.na(anexo)) {\r\n          url_block <- str_remove(url_block, fixed(anexo))\r\n        }\r\n        url_block <- str_split(url_block, \"Nº\\\\s+Inciso\\\\s+Nome|Legenda:|Cotação de preços para o item\")[[1]][1]\r\n        url_block <- str_remove_all(url_block, \"\\\\d{2}:\\\\d{2}\")\r\n        url_block <- str_remove_all(url_block, \"Endereço Eletrônico|Anexos|Hora da Cotação|Data da Cotação|Marca/Modelo|Informações Adicionais\")\r\n        url_match <- str_match(url_block, \"(https?://[\\\\s\\\\S]*)\")\r\n        if (!is.na(url_match[1, 2])) {\r\n          potential_url <- url_match[1, 2]\r\n          endereco_eletronico <- str_replace_all(potential_url, \"\\\\s+\", \"\") %>% str_extract(\"https?://[^\\\\s]+\")\r\n        }\r\n      }\r\n    }\r\n    all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(`Número da Pesquisa` = state_vars$numero_pesquisa, UASG = cotacao_uasg, `Título da Pesquisa` = state_vars$titulo, Item = state_vars$item_num, CATMAT = state_vars$catmat, `Descrição do Item` = state_vars$item_desc, `Nº Cotação` = n_cotacao, Inciso = inciso_val, Nome = nome_completo, Quantidade = quantidade, Unidade = unidade, `Preço unitário` = preco_formatado, Data = data_cotacao, Compõe = compone, `Endereço Eletrônico` = endereco_eletronico, Anexo = anexo)\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\nextract_format_C <- function(all_lines, state_vars) {\r\n  all_quotes_list <- list()\r\n  for (i in seq_along(all_lines)) {\r\n    line <- all_lines[i]\r\n    if (str_detect(line, \"Cotação de preços para o item\")) {\r\n      fornecedor <- str_match(line, \"Fornecedor: (.*?) - CNPJ:\")[, 2]\r\n      linha_inciso <- \"\"\r\n      linha_financeira <- \"\"\r\n      for (j in (i + 1):min(i + 10, length(all_lines))) {\r\n        if (str_detect(all_lines[j], \"^\\\\s*\\\\d+\\\\s+(I|II|III|IV)($|\\\\s)\"))\r\n          linha_inciso <- all_lines[j]\r\n        if (str_detect(all_lines[j], \"R\\\\$\")) {\r\n          linha_financeira <- all_lines[j]\r\n          break\r\n        }\r\n      }\r\n      if (nchar(linha_inciso) > 0 && nchar(linha_financeira) > 0) {\r\n        n_cotacao <- str_match(linha_inciso, \"^\\\\s*(\\\\d+)\")[, 2]\r\n        inciso <- str_match(linha_inciso, \"^\\\\s*\\\\d+\\\\s+(I|II|III|IV)\")[, 2]\r\n        tokens_financeiro <- str_squish(linha_financeira) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n        quantidade <- tokens_financeiro[1]\r\n        preco_unitario_str <- str_remove(tokens_financeiro[2], \"R\\\\$\")\r\n        data_cotacao <- tokens_financeiro[3]\r\n        compone <- tokens_financeiro[4]\r\n        preco_numerico <- parse_br_number(preco_unitario_str)\r\n        \r\n        preco_formatado <- if (!is.na(preco_numerico)) {\r\n          str_replace(sprintf(\"%.2f\", preco_numerico), \"\\\\.\", \",\")\r\n        } else {\r\n          preco_unitario_str\r\n        }\r\n        \r\n        all_quotes_list[[length(all_quotes_list) + 1]] <- tibble::tibble(`Número da Pesquisa` = state_vars$numero_pesquisa, UASG = NA_character_, `Título da Pesquisa` = state_vars$titulo, Item = state_vars$item_num, CATMAT = state_vars$catmat, `Descrição do Item` = state_vars$item_desc, `Nº Cotação` = n_cotacao, Inciso = inciso, Nome = fornecedor, Quantidade = quantidade, Unidade = \"\", `Preço unitário` = preco_formatado, Data = data_cotacao, Compõe = compone, `Endereço Eletrônico` = NA_character_, Anexo = NA_character_)\r\n      }\r\n    }\r\n  }\r\n  return(all_quotes_list)\r\n}\r\n\r\nprocess_pdf_data <- function(text_from_pages, progress_updater = NULL) {\r\n  \r\n  update_progress_if_possible <- function(value, detail) {\r\n    if (!is.null(progress_updater)) {\r\n      progress_updater(value = value, detail = detail)\r\n    }\r\n  }\r\n  \r\n  full_text <- paste(text_from_pages, collapse = \"\\n\")\r\n  all_lines <- unlist(str_split(full_text, \"\\n\"))\r\n  \r\n  total_lines <- length(all_lines)\r\n  \r\n  final_quotes <- list()\r\n  final_medians <- list()\r\n  state_vars <- list(numero_pesquisa = NA, uasg = NA, titulo = NA, item_num = NA, catmat = NA, item_desc = NA)\r\n  \r\n  pesquisa_starts <- which(str_detect(all_lines, \"Relatório de pesquisa de preço\"))\r\n  pesquisa_starts <- c(pesquisa_starts, length(all_lines) + 1)\r\n  \r\n  item_start_detector_regex <- \"^\\\\s*Item:\\\\s*\\\\d+\"\r\n  total_item_blocks <- sum(str_detect(all_lines, item_start_detector_regex))\r\n  \r\n  for (p in 1:(length(pesquisa_starts) - 1)) {\r\n    start_line <- pesquisa_starts[p]\r\n    end_line <- pesquisa_starts[p + 1] - 1\r\n    pesquisa_lines <- all_lines[start_line:end_line]\r\n    \r\n    header_idx <- which(str_detect(pesquisa_lines, \"Número da Pesquisa\\\\s+UASG\"))\r\n    if (length(header_idx) > 0) {\r\n      data_line <- pesquisa_lines[header_idx[1] + 1]\r\n      parts <- str_squish(data_line) %>% str_split(\"\\\\s+\") %>% .[[1]]\r\n      if (length(parts) >= 2) {\r\n        state_vars$numero_pesquisa <- parts[1]\r\n        state_vars$uasg <- parts[2]\r\n      }\r\n    }\r\n    \r\n    titulo_idx <- which(str_detect(pesquisa_lines, \"^\\\\s*Título:\"))\r\n    if (length(titulo_idx) > 0) {\r\n      state_vars$titulo <- str_remove(pesquisa_lines[titulo_idx[1]], \"Título:\") %>% str_squish()\r\n    }\r\n    \r\n    item_starts <- which(str_detect(pesquisa_lines, item_start_detector_regex))\r\n    item_starts <- c(item_starts, length(pesquisa_lines) + 1)\r\n    \r\n    for (k in 1:(length(item_starts) - 1)) {\r\n      item_start_line_local <- item_starts[k]\r\n      item_end_line_local <- item_starts[k + 1] - 1\r\n      item_lines <- pesquisa_lines[item_start_line_local:item_end_line_local]\r\n      \r\n      current_line_global <- start_line + item_start_line_local\r\n      progress_value <- 0.99 * (current_line_global / total_lines)\r\n      \r\n      total_itens_na_pesquisa <- length(item_starts) - 1\r\n      total_pesquisas <- length(pesquisa_starts) - 1\r\n      detalhe_texto <- sprintf(\"Pesquisa %d/%d (Item %d/%d) | Total geral: %d itens\", \r\n                               p, \r\n                               total_pesquisas, \r\n                               k, \r\n                               total_itens_na_pesquisa, \r\n                               total_item_blocks)\r\n      \r\n      update_progress_if_possible(\r\n        value = progress_value,\r\n        detail = paste0(detalhe_texto, \" (\", round(progress_value * 100, 1), \"%)\")\r\n      )\r\n      \r\n      state_vars$item_num <- str_extract(item_lines[1], \"\\\\d+\")\r\n      \r\n      desc_start_idx <- which(str_detect(item_lines, \"Descrição do item\"))\r\n      desc_end_markers <- which(str_detect(item_lines, \"Consolidação dos preços cotados|Nº\\\\s+Inciso\\\\s+Nome|Cotação de preços para o item\"))\r\n      \r\n      desc_end_idx <- integer(0)\r\n      if (length(desc_start_idx) > 0 && length(desc_end_markers) > 0) {\r\n        valid_ends <- desc_end_markers[desc_end_markers > desc_start_idx[1]]\r\n        if (length(valid_ends) > 0) {\r\n          desc_end_idx <- min(valid_ends)\r\n        }\r\n      }\r\n      \r\n      if (length(desc_start_idx) > 0 && length(desc_end_idx) > 0) {\r\n        full_desc <- paste(item_lines[(desc_start_idx[1] + 1):(desc_end_idx[1] - 1)], collapse = \" \") %>% str_squish()\r\n        desc_matches <- str_match(full_desc, \"^(\\\\d+)\\\\s*-\\\\s*(.*)\")\r\n        if (!is.na(desc_matches[1, 1])) {\r\n          state_vars$catmat <- desc_matches[1, 2]\r\n          state_vars$item_desc <- desc_matches[1, 3]\r\n        } else {\r\n          state_vars$catmat <- \"N/A\"\r\n          state_vars$item_desc <- full_desc\r\n        }\r\n      }\r\n      \r\n      item_text <- paste(item_lines, collapse = \"\\n\")\r\n      if (str_detect(item_text, \"Cotação de preços para o item\")) {\r\n        final_quotes <- c(final_quotes, extract_format_C(item_lines, state_vars))\r\n      } else {\r\n        final_quotes <- c(final_quotes, extract_format_AB(item_lines, state_vars))\r\n      }\r\n      \r\n      median_value <- NA_real_\r\n      header_line_idx <- which(str_detect(item_lines, \"Menor Preço.*Média.*Mediana\"))\r\n      if (length(header_line_idx) > 0) {\r\n        search_window <- item_lines[(header_line_idx[1] + 1):min(header_line_idx[1] + 5, length(item_lines))]\r\n        for (line in search_window) {\r\n          if (str_count(line, \"R\\\\$\") >= 3) {\r\n            price_values <- str_extract_all(line, \"R\\\\$\\\\s*[\\\\d.,]+\")[[1]]\r\n            if (length(price_values) >= 3) {\r\n              median_value <- parse_br_number(price_values[3])\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      quantidade_painel <- NA_real_\r\n      if (length(desc_start_idx) > 0 && length(desc_end_idx) > 0) {\r\n        search_window <- item_lines[(desc_start_idx[1] + 1):(desc_end_idx[1] - 1)]\r\n        qty_header_idx <- which(str_detect(search_window, \"Unidade de Fornecimento.*Quantidade\"))\r\n        if(length(qty_header_idx) > 0){\r\n          data_line_idx <- qty_header_idx[1] + 1\r\n          if(data_line_idx <= length(search_window)){\r\n            data_line <- search_window[data_line_idx]\r\n            qty_val <- str_extract_all(data_line, \"[\\\\d.,]+\")[[1]]\r\n            if(length(qty_val) > 0){\r\n              quantidade_painel <- parse_br_number(tail(qty_val, 1))\r\n            }\r\n          }\r\n        }\r\n        if(is.na(quantidade_painel)){\r\n          for (line in search_window) {\r\n            line_cleaned <- str_squish(line)\r\n            number_regex <- \"[\\\\d.,]*\\\\d[\\\\d.,]*\"\r\n            qty_match <- str_match(line_cleaned, paste0(\"^(?:.*\\\\s)?(\", number_regex, \")$\"))\r\n            if (!is.na(qty_match[1, 2])) {\r\n              parsed_num <- parse_br_number(qty_match[1, 2])\r\n              if (!is.na(parsed_num)) {\r\n                quantidade_painel <- parsed_num\r\n                break \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      final_medians[[length(final_medians) + 1]] <- tibble::tibble(\r\n        `Número da Pesquisa` = state_vars$numero_pesquisa, \r\n        Item = as.integer(state_vars$item_num), \r\n        `Mediana (PDF)` = median_value,\r\n        `Quantidade (PDF)` = quantidade_painel\r\n      )\r\n    }\r\n  }\r\n  \r\n  quotes_df <- if (length(final_quotes) > 0)\r\n    dplyr::distinct(dplyr::bind_rows(final_quotes))\r\n  else\r\n    data.frame()\r\n  \r\n  medians_df <- if (length(final_medians) > 0)\r\n    dplyr::bind_rows(final_medians)\r\n  else\r\n    data.frame()\r\n  \r\n  if (nrow(quotes_df) == 0) {\r\n    stop(\"Nenhum dado de cotação válido foi extraído. Verifique se o PDF está no formato correto do compras.gov.br.\")\r\n  }\r\n  \r\n  return(list(quotes = quotes_df, medians = medians_df, item_count = total_item_blocks))\r\n}\r\n\r\n# ===================================================================================\r\n# INTERFACE DO USUÁRIO (UI)\r\n# ===================================================================================\r\nui <- fluidPage(\r\n  useShinyjs(),\r\n  theme = bslib::bs_theme(\r\n    version = 5, preset = \"shiny\", bg = \"#F0F3F4\", fg = \"#1C2833\", primary = \"#1E8449\",\r\n    secondary = \"#145A32\", base_font = bslib::font_google(\"Montserrat\", local = FALSE),\r\n    heading_font = bslib::font_google(\"Roboto Slab\", local = FALSE),\r\n    \"card-header-bg\" = \"#1E8449\", \"card-header-color\" = \"#FFFFFF\"\r\n  ),\r\n  tags$head(\r\n    # --- NOVO SCRIPT DE DOWNLOAD DO GRÁFICO ---\r\n    tags$script(HTML(\"\r\n      function downloadOriginalPlot(button_id) {\r\n        // Encontra a imagem do gráfico na página\r\n        const plotImg = document.querySelector('#price_plot img');\r\n        if (!plotImg) {\r\n          alert('Erro: Imagem do gráfico não encontrada na página.');\r\n          return;\r\n        }\r\n\r\n        // Pega o URL da imagem original (a que o Shiny enviou)\r\n        const imgSrc = plotImg.src;\r\n\r\n        // Pega o nome do arquivo que foi armazenado no botão\r\n        const filename = document.getElementById(button_id).getAttribute('data-filename');\r\n\r\n        // Cria um link temporário para o download\r\n        const link = document.createElement('a');\r\n        link.href = imgSrc;\r\n        link.download = filename || 'grafico.png'; // Nome do arquivo\r\n        \r\n        // Simula o clique no link para iniciar o download\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n    \")),\r\n    \r\n    # ========================================================================\r\n    # <<< INÍCIO DA ALTERAÇÃO >>>\r\n    # --- SCRIPT PARA DOWNLOAD DO ARQUIVO EXCEL (BASE64) ---\r\n    # Este script cria um \"ouvinte\" que espera por uma mensagem do servidor R\r\n    # com o tipo 'download_b64'. Quando a mensagem é recebida, ele cria um\r\n    # link de download com os dados codificados em Base64 e o clica,\r\n    # iniciando o download no navegador do usuário.\r\n    # ========================================================================\r\n    tags$script(HTML(\"\r\n      Shiny.addCustomMessageHandler('download_b64', function(message) {\r\n        // Cria um elemento de link <a> temporário\r\n        const link = document.createElement('a');\r\n        \r\n        // Define o 'href' do link para ser um Data URL contendo os dados do arquivo\r\n        link.href = 'data:' + message.mime + ';base64,' + message.data;\r\n        \r\n        // Define o atributo 'download' com o nome do arquivo sugerido\r\n        link.download = message.filename;\r\n        \r\n        // Adiciona o link ao corpo do documento (necessário para o clique funcionar)\r\n        document.body.appendChild(link);\r\n        \r\n        // Simula um clique no link para iniciar o download\r\n        link.click();\r\n        \r\n        // Remove o link do corpo do documento para limpeza\r\n        document.body.removeChild(link);\r\n      });\r\n    \")),\r\n    # ========================================================================\r\n    # <<< FIM DA ALTERAÇÃO >>>\r\n    # ========================================================================\r\n    \r\n    tags$style(HTML(\"\r\n      /* --- Estilos Gerais da Interface --- */\r\n      .shiny-notification {\r\n        width: 550px !important;\r\n        left: 33.5% !important;\r\n        transform: translateX(-50%) !important;\r\n      }\r\n      .shiny-progress-notification .progress-text {\r\n          white-space: nowrap;\r\n      }\r\n      .vertically-centered-card .value-box-area {\r\n        align-items: center !important;\r\n      }\r\n      #status_text, #summary_details_output {\r\n        color: white;\r\n        background-color: transparent;\r\n        border: none;\r\n        white-space: pre-wrap;\r\n        word-break: break-word;\r\n        font-size: 1em;\r\n      }\r\n      .faded-text { color: #AAB7B8; }\r\n      .shiny-input-container .progress {\r\n        height: 35px !important;\r\n        min-width: 200px !important;\r\n        overflow: hidden;\r\n      }\r\n      .shiny-input-container .progress-bar {\r\n        font-size: 18px !important;\r\n        line-height: 35px !important;\r\n        white-space: nowrap !important;\r\n        overflow: hidden;\r\n      }\r\n      #item_details_card { background-color: #EBF5FB; border-left: 5px solid #3498DB; }\r\n      .sidebar { overflow: hidden; }\r\n    \")),\r\n    \r\n    tags$script(src = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"),\r\n    tags$script(HTML(\"\r\n      window.pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n      if (pdfjsLib) pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n    \")),\r\n    tags$script(HTML(\"\r\n      (function(){async function readPdfFile(file){if(!file||!window.pdfjsLib)return;if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages',null,{priority:'event'});}try{const buf=await file.arrayBuffer();const loadingTask=window.pdfjsLib.getDocument({data:new Uint8Array(buf)});const pdf=await loadingTask.promise;const pages=[];for(let p=1;p<=pdf.numPages;p++){const page=await pdf.getPage(p);const textContent=await page.getTextContent();const yTol=2;let lastY=-1;let lineBuffer=[];const pageLines=[];textContent.items.sort((a,b)=>{if(Math.abs(a.transform[5]-b.transform[5])>yTol){return b.transform[5]-a.transform[5];}return a.transform[4]-b.transform[4];});for(const item of textContent.items){if(lastY!==-1&&Math.abs(item.transform[5]-lastY)>yTol){pageLines.push(lineBuffer.join(' '));lineBuffer=[];}lineBuffer.push(item.str);lastY=item.transform[5];}if(lineBuffer.length>0){pageLines.push(lineBuffer.join(' '));}pages.push(pageLines.join('\\\\n'));}if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages',pages,{priority:'event'});}}catch(err){console.error('Falha ao ler PDF via pdf.js:',err);if(window.Shiny&&Shiny.setInputValue){Shiny.setInputValue('pdf_text_pages_error',String(err),{priority:'event'});}}}document.addEventListener('change',e=>{const tgt=e.target;if(tgt&&tgt.id==='pdf_file'&&tgt.files&&tgt.files[0]){readPdfFile(tgt.files[0]);}},true);})();\"))\r\n  ),\r\n  div(\r\n    class = \"text-center p-4 mb-4\", style = \"background-color: #145A32; color: white;\",\r\n    h1(icon(\"file-invoice-dollar\"), \"Análise Automatizada de Pesquisa de Preços\"),\r\n    p(\"Faça aqui o upload do relatório PDF de pesquisa de preço do compras.gov.br para análise das cotações.\", br(),\r\n      tags$small(\"Esta ferramenta está em conformidade com as diretrizes da Instrução Normativa SEGES/ME nº 65/2021\", class = \"faded-text\")\r\n    )\r\n  ),\r\n  bslib::layout_sidebar(\r\n    sidebar = bslib::sidebar(\r\n      width = \"375px\",\r\n      bslib::card(\r\n        bslib::card_header(class = \"d-flex justify-content-between align-items-center\", \"Painel de Controle\", tags$span(icon(\"sliders-h\"), class = \"h5 mb-0\")),\r\n        bslib::card_body(\r\n          fileInput(\"pdf_file\", \"Selecione o relatório PDF para iniciar:\", accept = c(\".pdf\"), width = \"100%\"),\r\n          div(id = \"process_button_container\",\r\n              uiOutput(\"process_button_ui\")\r\n          ),\r\n          uiOutput(\"reset_button_ui\")\r\n        ),\r\n        bslib::card_footer(\r\n          div(\r\n            class = \"text-center\",\r\n            style = \"border-top: 1px solid #E5E7E9; padding-top: 15px; margin-top: 15px;\",\r\n            p(strong(icon(\"users\"), \" Desenvolvido por:\")),\r\n            p(strong(\"Marcos Castaneda\"), br(), tags$small(\"Economista - Universidade Federal de Sergipe\")),\r\n            p(strong(\"Roney Melo\"), br(), tags$small(\"Atuário - Universidade Federal de Sergipe\"))\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    \r\n    bslib::navset_card_tab(\r\n      id = \"main_tabs\",\r\n      title = \"Resultados da Análise\",\r\n      \r\n      bslib::nav_panel(\r\n        \"Início e Status\", icon = icon(\"home\"),\r\n        bslib::layout_columns(\r\n          col_widths = c(6, 6),\r\n          bslib::card(\r\n            bslib::card_header(icon(\"book-open\"), \"Como Usar\"),\r\n            bslib::card_body(\r\n              style = \"text-align: justify;\",\r\n              p(\"Siga estes três passos simples para obter sua análise:\"),\r\n              tags$ol(\r\n                tags$li(strong(\"Carregue o arquivo:\"), \" Clique no botão 'Browse...' ou 'Navegar...' e escolha o PDF da pesquisa de preços (exclusivamente para arquivos PDF gerados no compras.gov.br).\"),\r\n                tags$li(strong(\"Inicie o processo:\"), \" Após o nome do arquivo aparecer, um botão surgirá. Clique em 'Processar e Baixar Planilha Excel'.\"),\r\n                tags$li(strong(\"Receba o resultado:\"), \" Aguarde a conclusão. O download da planilha Excel começará automaticamente.\")\r\n              )\r\n            )\r\n          ),\r\n          bslib::card(\r\n            height = \"100%\", bslib::card_header(icon(\"terminal\"), \"Status do Processamento\"),\r\n            bslib::card_body(\r\n              style = \"background-color: #2E4053; color: #EAECEE; font-family: monospace; font-size: 0.9em; overflow-y: auto;\",\r\n              verbatimTextOutput(\"status_text\")\r\n            )\r\n          )\r\n        )\r\n      ),\r\n      \r\n      bslib::nav_panel(\r\n        \"Resumo da Extração\", icon = icon(\"list-check\"),\r\n        conditionalPanel(\r\n          condition = \"output.data_is_ready\",\r\n          uiOutput(\"summary_cards_ui\"),\r\n          uiOutput(\"redownload_button_ui\"), \r\n          bslib::card(\r\n            height = \"100%\", bslib::card_header(icon(\"info-circle\"), \"Detalhes da Extração\"),\r\n            bslib::card_body(\r\n              style = \"background-color: #2E4053; color: #EAECEE; font-family: monospace; overflow-y: auto;\",\r\n              verbatimTextOutput(\"summary_details_output\")\r\n            )\r\n          )\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"!output.data_is_ready\",\r\n          bslib::card(\r\n            class = \"text-center\",\r\n            style = \"border-left: 5px solid #1E8449; background-color: #F8F9F9;\",\r\n            bslib::card_body(\r\n              h4(icon(\"inbox\"), \"Aguardando Resultados\"),\r\n              p(\"O resumo da extração aparecerá aqui após a extração bem-sucedida de um relatório de pesquisa de preço (Exclusivo para PDF gerado no compas.gov.br).\", class=\"text-muted\")\r\n            )\r\n          )\r\n        )\r\n      ),\r\n      \r\n      bslib::nav_panel(\r\n        \"Análise Gráfica\", icon = icon(\"chart-bar\"),\r\n        conditionalPanel(\r\n          condition = \"output.data_is_ready\",\r\n          bslib::card(\r\n            bslib::card_header(\"Distribuição de Preços Unitários por Item\"),\r\n            bslib::card_body(\r\n              p(\"Selecione a pesquisa e o item para visualizar a distribuição dos preços unitários coletados.\"),\r\n              # --- LAYOUT DOS FILTROS E BOTÃO AJUSTADO ---\r\n              bslib::layout_columns(\r\n                col_widths = c(3, 3, 3, 3), \r\n                uiOutput(\"research_selector_ui\"),\r\n                uiOutput(\"item_selector_ui\"),\r\n                uiOutput(\"compoe_selector_ui\"),\r\n                uiOutput(\"download_controls_ui\") # Botão movido para a mesma linha\r\n              ),\r\n              uiOutput(\"dynamic_plot_ui\")\r\n            )\r\n          )\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"!output.data_is_ready\",\r\n          bslib::card(\r\n            class = \"text-center\",\r\n            style = \"border-left: 5px solid #1E8449; background-color: #F8F9F9;\",\r\n            bslib::card_body(\r\n              h4(icon(\"chart-bar\"), \"Aguardando Análise\"),\r\n              p(\"O gráfico com a distribuição dos preços aparecerá aqui após a extração de um relatório de pesquisa de preço (Exclusivo para PDF gerado no compas.gov.br).\", class=\"text-muted\")\r\n            )\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    \r\n    div(\r\n      style = \"height: 110px;\",\r\n      bslib::card(\r\n        class = \"border-warning h-100\",\r\n        bslib::card_body(\r\n          class = \"d-flex align-items-center\",\r\n          div(class = \"d-flex align-items-center\",\r\n              div(icon(\"exclamation-triangle\", class = \"fa-2x text-warning me-3\")),\r\n              div(\r\n                strong(\"Aviso Importante:\"),\r\n                p(\"Esta ferramenta é um poderoso auxílio para a conferência da pesquisa de preços de referência feitas no compras.gov.br, mas não elimina a necessidade de avaliação crítica do responsável.\", class = \"mb-0 small\")\r\n              )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# ===================================================================================\r\n# LÓGICA DO SERVIDOR (SERVER)\r\n# ===================================================================================\r\nserver <- function(input, output, session) {\r\n  \r\n  log_text <- reactiveVal(\"Aguardando o upload do arquivo PDF...\")\r\n  processed_data_rv <- reactiveVal(NULL)\r\n  excel_download_data <- reactiveVal(NULL)\r\n  \r\n  output$data_is_ready <- reactive({\r\n    !is.null(processed_data_rv())\r\n  })\r\n  outputOptions(output, \"data_is_ready\", suspendWhenHidden = FALSE)\r\n  \r\n  observeEvent(input$pdf_file, {\r\n    req(input$pdf_file)\r\n    shinyjs::show(\"process_button_container\")\r\n    shinyjs::hide(\"reset_button_ui\")\r\n    log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' carregado.\\nIniciando leitura do conteúdo no navegador... Aguarde.\"))\r\n    processed_data_rv(NULL)\r\n    excel_download_data(NULL)\r\n  })\r\n  \r\n  # --- LÓGICA DE VALIDAÇÃO DO PDF ---\r\n  observeEvent(input$pdf_text_pages, {\r\n    req(input$pdf_file$name)\r\n    \r\n    full_text <- paste(input$pdf_text_pages, collapse = \"\\n\")\r\n    \r\n    if (stringr::str_detect(full_text, \"Relatório de pesquisa de preço\")) {\r\n      log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' lido. Formato válido.\\nPronto! Clique em processar para gerar a planilha Excel.\"))\r\n      \r\n      showNotification(\r\n        \"✅ Formato de PDF reconhecido.\",\r\n        duration = 5,\r\n        type = \"message\",\r\n        closeButton = FALSE\r\n      )\r\n      \r\n      shinyjs::enable(\"process_button\")\r\n    } else {\r\n      log_text(paste0(\"Arquivo '\", input$pdf_file$name, \"' lido. Formato INVÁLIDO.\\nPor favor, selecione um 'Relatório de pesquisa de preço' do Compras.gov.br.\"))\r\n      \r\n      showNotification(\r\n        \"⚠️ Formato de PDF não reconhecido. Verifique o arquivo.\",\r\n        type = \"warning\",\r\n        duration = 10\r\n      )\r\n      \r\n      shinyjs::disable(\"process_button\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$pdf_text_pages_error, ignoreInit = TRUE, {\r\n    log_text(paste(log_text(), \"\\n[AVISO] Falha do leitor PDF no navegador:\", input$pdf_text_pages_error))\r\n  })\r\n  \r\n  output$status_text <- renderText({ log_text() })\r\n  \r\n  output$process_button_ui <- renderUI({\r\n    req(input$pdf_file)\r\n    \r\n    if (is.null(input$pdf_text_pages)) {\r\n      actionButton(\"loading_button\", \"Lendo o PDF no navegador...\", icon = icon(\"spinner\", class = \"fa-spin\"), class = \"btn-secondary btn-lg w-100\", disabled = TRUE)\r\n    } else {\r\n      actionButton(\"process_button\", \"Processar e Baixar Planilha Excel\", icon = icon(\"cogs\"), class = \"btn-primary btn-lg w-100\")\r\n    }\r\n  })\r\n  \r\n  output$reset_button_ui <- renderUI({\r\n    actionButton(\"reset_button\", \"Limpar e Recomeçar\", icon = icon(\"eraser\"), class = \"btn-outline-danger w-100 mt-2\")\r\n  })\r\n  \r\n  shinyjs::hide(\"reset_button_ui\")\r\n  \r\n  observeEvent(input$reset_button, {\r\n    shinyjs::reset(\"pdf_file\")\r\n    shinyjs::hide(\"process_button_container\")\r\n    shinyjs::hide(\"reset_button_ui\")\r\n    \r\n    shinyjs::runjs(\"document.getElementById('pdf_file').value = ''; Shiny.setInputValue('pdf_text_pages', null, {priority: 'event'});\")\r\n    \r\n    processed_data_rv(NULL)\r\n    excel_download_data(NULL)\r\n    log_text(\"Aguardando o upload do arquivo PDF...\")\r\n    updateTabsetPanel(session, \"main_tabs\", selected = \"Início e Status\")\r\n  })\r\n  \r\n  observeEvent(input$process_button, {\r\n    req(input$pdf_file, input$pdf_text_pages)\r\n    \r\n    shinyjs::hide(\"process_button_container\")\r\n    \r\n    log_text(\"Iniciando o processo...\\nIsso pode levar alguns segundos.\\n\\n--- LOG DE PROCESSAMENTO ---\")\r\n    \r\n    withProgress(message = 'Em execução:', value = 0, {\r\n      \r\n      tmp_xlsx_path <- NULL\r\n      process_success <- FALSE\r\n      \r\n      tryCatch({\r\n        log_text(paste(log_text(), \"\\n[1/3] Extraindo dados do PDF...\"))\r\n        \r\n        text_pages <- get_pdf_text_pages(NULL, input$pdf_text_pages)\r\n        processed_data <- process_pdf_data(text_pages, progress_updater = setProgress)\r\n        \r\n        processed_data_rv(processed_data)\r\n        \r\n        dados_extracao_pdf <- processed_data$quotes\r\n        all_pdf_medians <- processed_data$medians\r\n        \r\n        setProgress(0.99, detail = \"Preparando dados para análise...\")\r\n        log_text(paste(log_text(), \"\\n[2/3] Preparando dados para análise e montagem do Excel...\"))\r\n        \r\n        extracao_df <- dados_extracao_pdf\r\n        extracao_df$`Preço unitário` <- parse_br_number(extracao_df$`Preço unitário`)\r\n        extracao_df <- extracao_df %>% mutate(Item = as.integer(Item))\r\n        \r\n        incisos_summary <- extracao_df %>%\r\n          filter(Compõe == \"Sim\" & !is.na(`Preço unitário`) & !is.na(Inciso)) %>%\r\n          group_by(`Número da Pesquisa`, Item) %>%\r\n          summarise(\r\n            INCISOS_CONCAT = paste(sort(unique(Inciso)), collapse = \",\"),\r\n            .groups = \"drop\"\r\n          )\r\n        \r\n        base_data <- extracao_df %>%\r\n          filter(Compõe == \"Sim\" & !is.na(`Preço unitário`)) %>%\r\n          group_by(`Número da Pesquisa`, Item) %>%\r\n          arrange(as.integer(`Nº Cotação`)) %>%\r\n          mutate(price_num = paste0(\"Preço \", row_number())) %>%\r\n          summarise(\r\n            CATMAT = first(CATMAT), `Descrição do Item` = first(`Descrição do Item`),\r\n            prices_data = list(tibble::tibble(price_num, `Preço unitário`)), .groups = 'drop'\r\n          ) %>%\r\n          tidyr::unnest(prices_data) %>%\r\n          tidyr::pivot_wider(names_from = price_num, values_from = `Preço unitário`) %>%\r\n          ungroup()\r\n        \r\n        base_data$Item <- as.integer(base_data$Item)\r\n        all_pdf_medians$Item <- as.integer(all_pdf_medians$Item)\r\n        \r\n        dados_conferencia <- base_data %>%\r\n          left_join(all_pdf_medians, by = c(\"Número da Pesquisa\", \"Item\")) %>%\r\n          left_join(incisos_summary, by = c(\"Número da Pesquisa\", \"Item\")) %>%\r\n          arrange(`Número da Pesquisa`, Item)\r\n        \r\n        price_cols <- grep(\"^Preço \\\\d+$\", names(dados_conferencia), value = TRUE)\r\n        \r\n        if (length(price_cols) > 0) {\r\n          nova_coluna_nome <- \"A pesquisa atende o Parâmetro I ou II, Art.5º, da IN 65/2021?\"\r\n          \r\n          final_col_order <- c(\"Número da Pesquisa\", \"Item\", \"CATMAT\", \"Descrição do Item\", price_cols,\r\n                               \"Média dos Preços\", \"Mediana dos Preços\", \"Desvio Padrão dos Preços\",\r\n                               \"Coeficiente de Variação\", \"Usar Mediana?\", \"Mediana (PDF)\",\r\n                               \"Valor de Referência\", \"Quantidade (PDF)\", \"Total Estimado\",\r\n                               \"Valor unitário de referência = ou < que a mediana do Compras?\",\r\n                               nova_coluna_nome)\r\n          \r\n          price_start_letter <- openxlsx::int2col(match(price_cols[1], final_col_order))\r\n          price_end_letter <- openxlsx::int2col(match(price_cols[length(price_cols)], final_col_order))\r\n          media_letter <- openxlsx::int2col(match(\"Média dos Preços\", final_col_order))\r\n          mediana_letter <- openxlsx::int2col(match(\"Mediana dos Preços\", final_col_order))\r\n          desvio_letter <- openxlsx::int2col(match(\"Desvio Padrão dos Preços\", final_col_order))\r\n          cv_letter <- openxlsx::int2col(match(\"Coeficiente de Variação\", final_col_order))\r\n          usar_mediana_letter <- openxlsx::int2col(match(\"Usar Mediana?\", final_col_order))\r\n          painel_letter <- openxlsx::int2col(match(\"Mediana (PDF)\", final_col_order))\r\n          ref_val_letter <- openxlsx::int2col(match(\"Valor de Referência\", final_col_order))\r\n          quantidade_painel_letter <- openxlsx::int2col(match(\"Quantidade (PDF)\", final_col_order))\r\n          \r\n          dados_conferencia <- dados_conferencia %>%\r\n            mutate(\r\n              excel_row = row_number() + 2,\r\n              price_range = paste0(price_start_letter, excel_row, \":\", price_end_letter, excel_row),\r\n              `Média dos Preços` = paste0(\"AVERAGE(\", price_range, \")\"),\r\n              `Mediana dos Preços` = paste0(\"MEDIAN(\", price_range, \")\"),\r\n              `Desvio Padrão dos Preços` = paste0(\"STDEVP(\", price_range, \")\"),\r\n              `Coeficiente de Variação` = paste0(\"IFERROR(\", desvio_letter, excel_row, \"/\", media_letter, excel_row, \", 0)\"),\r\n              `Usar Mediana?` = paste0('IF(', cv_letter, excel_row, '>0.25, \"Sim\", \"Não\")'),\r\n              `Valor de Referência` = paste0('IF(', usar_mediana_letter, excel_row, '=\"Sim\", ', mediana_letter, excel_row, ', ', media_letter, excel_row, ')'),\r\n              `Total Estimado` = paste0(\"IF(ISNUMBER(\", quantidade_painel_letter, excel_row, \"),\", ref_val_letter, excel_row, \"*\", quantidade_painel_letter, excel_row, ',\"-\")'),\r\n              \r\n              !!nova_coluna_nome := dplyr::case_when(\r\n                is.na(INCISOS_CONCAT) | INCISOS_CONCAT == \"\" ~ \"Sem Inciso Coletado\",\r\n                stringr::str_detect(INCISOS_CONCAT, \",\") ~ paste(\"Combinado - Parâmetros\", INCISOS_CONCAT),\r\n                INCISOS_CONCAT == \"I\" ~ \"Parâmetro I\",\r\n                INCISOS_CONCAT == \"II\" ~ \"Parâmetro II\",\r\n                INCISOS_CONCAT == \"III\" ~ \"Parâmetro III\",\r\n                INCISOS_CONCAT == \"IV\" ~ \"Parâmetro IV\",\r\n                TRUE ~ \"\"\r\n              ),\r\n              \r\n              `Valor unitário de referência = ou < que a mediana do Compras?` = paste0('IF(OR(ISBLANK(', ref_val_letter, excel_row, '), ISBLANK(', painel_letter, excel_row, ')), \"Verificar\", IF(', ref_val_letter, excel_row, '<=', painel_letter, excel_row, ', \"Sim\", \"Não\"))')\r\n            )\r\n          \r\n          aba2_data <- dados_conferencia %>% select(any_of(final_col_order))\r\n        } else {\r\n          aba2_data <- dados_conferencia\r\n        }\r\n        \r\n        ordem_desejada_aba1 <- c('Número da Pesquisa','Item', 'Compõe', 'Nº Cotação', 'Inciso', 'UASG','Nome', 'Quantidade', 'Unidade', 'Preço unitário', 'Data', 'Endereço Eletrônico', 'Anexo', 'CATMAT', 'Descrição do Item', 'Título da Pesquisa')\r\n        \r\n        aba1_data <- dados_extracao_pdf %>%\r\n          mutate(\r\n            Item = as.integer(Item),\r\n            `Nº Cotação` = as.integer(`Nº Cotação`),\r\n            Anexo = ifelse(is.na(Anexo), \"\", Anexo)\r\n          ) %>%\r\n          arrange(`Número da Pesquisa`, Item, `Nº Cotação`) %>%\r\n          select(any_of(ordem_desejada_aba1))\r\n        \r\n        formula_cols <- c(\"Média dos Preços\", \"Mediana dos Preços\", \"Desvio Padrão dos Preços\",\r\n                          \"Coeficiente de Variação\", \"Usar Mediana?\", \"Valor de Referência\",\r\n                          \"Total Estimado\", \"Valor unitário de referência = ou < que a mediana do Compras?\")\r\n        for(col in formula_cols) if (col %in% names(aba2_data)) class(aba2_data[[col]]) <- \"formula\"\r\n        \r\n        setProgress(0.995, detail = \"Criando e formatando o arquivo Excel...\")\r\n        \r\n        wb <- createWorkbook()\r\n        \r\n        addWorksheet(wb, \"Extração_PDF\")\r\n        header_style_aba1 <- createStyle(textDecoration = \"bold\", fgFill = \"#1E8449\", fontColour = \"white\", halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\", wrapText = TRUE)\r\n        \r\n        urls_para_links <- NULL\r\n        if (\"Endereço Eletrônico\" %in% names(aba1_data)) {\r\n          urls_para_links <- str_extract(aba1_data$`Endereço Eletrônico`, \"https?://[^\\\\s]+\")\r\n          aba1_data$`Endereço Eletrônico` <- \"\"\r\n        }\r\n        \r\n        writeData(wb, \"Extração_PDF\", aba1_data, headerStyle = header_style_aba1)\r\n        \r\n        if (!is.null(urls_para_links)) {\r\n          col_idx <- which(names(aba1_data) == \"Endereço Eletrônico\")\r\n          for (i in seq_along(urls_para_links)) {\r\n            url <- urls_para_links[[i]]\r\n            if (!is.na(url) && url != \"\") {\r\n              link_obj <- url\r\n              names(link_obj) <- url\r\n              class(link_obj) <- \"hyperlink\"\r\n              writeData(wb, sheet = \"Extração_PDF\", x = link_obj, startCol = col_idx, startRow = i + 1)\r\n            }\r\n          }\r\n        }\r\n        \r\n        setColWidths(wb, \"Extração_PDF\", cols = 1:ncol(aba1_data), widths = \"auto\")\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) %in% c(\"Nome\", \"Descrição do Item\", \"Endereço Eletrônico\", \"Anexo\")), widths = 50)\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) %in% c(\"Compõe\", \"CATMAT\")), widths = 15)\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) == \"Item\"), widths = 10)\r\n        setColWidths(wb, \"Extração_PDF\", cols = which(names(aba1_data) %in% c(\"Quantidade\", \"Unidade\")), widths = 18)\r\n        \r\n        addWorksheet(wb, \"Conferência\")\r\n        \r\n        names(aba2_data)[names(aba2_data) == \"Coeficiente de Variação\"] <- \"Coeficiente\\nde Variação\"\r\n        names(aba2_data)[names(aba2_data) == \"Mediana (PDF)\"] <- \"Mediana\\n(compras.gov.br)\"\r\n        names(aba2_data)[names(aba2_data) == \"Quantidade (PDF)\"] <- \"Quantidade\\n(Solicitada)\"\r\n        names(aba2_data)[names(aba2_data) == nova_coluna_nome] <- \"A pesquisa atende o Parâmetro I ou II,\\nArt.5º, da IN 65/2021?\"\r\n        names(aba2_data)[names(aba2_data) == \"Valor unitário de referência = ou < que a mediana do Compras?\"] <- \"Valor unitário de referência\\n= ou < que a mediana do compras.gov.br?\"\r\n        \r\n        regra_txt <- \"Regra: Usar média se o Coeficiente de Variação <=25%\"\r\n        col_start_regra <- which(grepl(\"Desvio Padrão\", names(aba2_data)))\r\n        col_end_regra <- which(grepl(\"Usar Mediana\", names(aba2_data)))\r\n        if(length(col_start_regra) > 0 && length(col_end_regra) > 0) {\r\n          writeData(wb, \"Conferência\", regra_txt, startCol = col_start_regra, startRow = 1)\r\n          mergeCells(wb, \"Conferência\", cols = col_start_regra:col_end_regra, rows = 1)\r\n          style_regra <- createStyle(halign = \"center\", textDecoration = \"bold\", fgFill = \"#FCE4D6\")\r\n          addStyle(wb, \"Conferência\", style = style_regra, rows = 1, cols = col_start_regra:col_end_regra, gridExpand = TRUE)\r\n        }\r\n        \r\n        header_style_aba2 <- createStyle(textDecoration = \"bold\", fgFill = \"#D9E1F2\", halign = \"center\", valign = \"center\", border = \"TopBottomLeftRight\", wrapText = TRUE)\r\n        writeData(wb, \"Conferência\", aba2_data, startRow = 2, headerStyle = header_style_aba2, colNames = TRUE)\r\n        \r\n        currency_style <- createStyle(numFmt = \"R$ #,##0.00\")\r\n        percent_style <- createStyle(numFmt = \"0.00%\")\r\n        \r\n        currency_cols_names <- c(price_cols, \"Média dos Preços\", \"Mediana dos Preços\", \"Desvio Padrão dos Preços\", \"Valor de Referência\", \"Mediana\\n(PDF)\", \"Total Estimado\")\r\n        percent_cols_names <- c(\"Coeficiente\\nde Variação\")\r\n        \r\n        setColWidths(wb, \"Conferência\", cols = 1:ncol(aba2_data), widths = \"auto\")\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Descrição do Item\"), widths = 50)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Item\"), widths = 12)\r\n        cols_to_widen_conf <- c(\"CATMAT\", price_cols)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) %in% cols_to_widen_conf), widths = 15)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"A pesquisa atende o Parâmetro I ou II,\\nArt.5º, da IN 65/2021?\"), widths = 40)\r\n        setColWidths(wb, \"Conferência\", cols = which(names(aba2_data) == \"Valor unitário de referência\\n= ou < que a mediana do compras.gov.br?\"), widths = 40)\r\n        \r\n        for(col_name in names(aba2_data)){\r\n          col_idx <- which(names(aba2_data) == col_name)\r\n          style_to_apply <- NULL\r\n          if(col_name %in% currency_cols_names) {\r\n            style_to_apply <- currency_style\r\n          } else if (col_name %in% percent_cols_names) {\r\n            style_to_apply <- percent_style\r\n          }\r\n          if(!is.null(style_to_apply)) addStyle(wb, \"Conferência\", style = style_to_apply, rows = 3:(nrow(aba2_data) + 2), cols = col_idx, gridExpand = TRUE, stack = TRUE)\r\n        }\r\n        \r\n        setProgress(0.999, detail = \"Finalizando e preparando download...\")\r\n        log_text(paste(log_text(), \"\\n[3/3] Codificando arquivo para download...\"))\r\n        \r\n        tmp_xlsx_path <- tempfile(fileext = \".xlsx\")\r\n        saveWorkbook(wb, tmp_xlsx_path, overwrite = TRUE)\r\n        \r\n        filename <- paste0(\"Análise_Pesquisa_\", tools::file_path_sans_ext(input$pdf_file$name), format(Sys.time(), \"_%d-%m-%Y_%Hh%Mm%Ss\"), \".xlsx\")\r\n        file_data <- readBin(tmp_xlsx_path, \"raw\", file.info(tmp_xlsx_path)$size)\r\n        encoded_data <- base64enc::base64encode(file_data)\r\n        \r\n        session$sendCustomMessage(type = \"download_b64\", message = list(data = encoded_data, filename = filename, mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"))\r\n        \r\n        excel_download_data(list(data = encoded_data, filename = filename, mime = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"))\r\n        \r\n        setProgress(1, detail = \"Concluído!\")\r\n        log_text(paste(log_text(), \"\\nSucesso! O download foi iniciado.\"))\r\n        process_success <- TRUE\r\n        \r\n        updateTabsetPanel(session, \"main_tabs\", selected = \"Resumo da Extração\")\r\n        \r\n      }, error = function(e) {\r\n        log_text(paste(log_text(), \"\\n\\n--- ERRO DURANTE O PROCESSAMENTO ---\\n\", e$message))\r\n        processed_data_rv(NULL)\r\n        excel_download_data(NULL)\r\n        \r\n        error_title <- \"Ocorreu um Erro Inesperado\"\r\n        error_message <- \"Ocorreu um erro durante o processamento. Verifique o log de status para detalhes técnicos. Se o problema persistir, contate o suporte.\"\r\n        \r\n        if (grepl(\"Nenhum dado de cotação válido foi extraído\", e$message, ignore.case = TRUE)) {\r\n          error_title <- \"Formato de PDF Inválido\"\r\n          error_message <- \"Não foi possível extrair os dados. A aplicação funciona exclusivamente com o PDF de 'Relatório de pesquisa de preço' gerado pelo sistema Compras.gov.br. Por favor, verifique se o arquivo carregado está no formato correto.\"\r\n        }\r\n        \r\n        showModal(modalDialog(\r\n          title = tagList(icon(\"times-circle\", class=\"text-danger\"), \" \", error_title),\r\n          error_message,\r\n          footer = modalButton(\"Fechar\"),\r\n          easyClose = TRUE\r\n        ))\r\n      }, finally = {\r\n        if (process_success) {\r\n          shinyjs::show(\"reset_button_ui\")\r\n        } else {\r\n          shinyjs::show(\"process_button_container\")\r\n        }\r\n        \r\n        if (!is.null(tmp_xlsx_path) && file.exists(tmp_xlsx_path)) unlink(tmp_xlsx_path)\r\n      })\r\n    })\r\n  })\r\n  \r\n  output$redownload_button_ui <- renderUI({\r\n    req(excel_download_data())\r\n    div(class = \"text-center mt-2 mb-3\", \r\n        actionButton(\"redownload_excel\", \"Baixar Planilha Novamente\", icon = icon(\"download\"), class = \"btn-success\")\r\n    )\r\n  })\r\n  \r\n  observeEvent(input$redownload_excel, {\r\n    req(excel_download_data())\r\n    session$sendCustomMessage(type = \"download_b64\", message = excel_download_data())\r\n    log_text(paste(log_text(), \"\\nDownload da planilha solicitado novamente.\"))\r\n  })\r\n  \r\n  output$summary_cards_ui <- renderUI({\r\n    data <- processed_data_rv()\r\n    req(data, cancelOutput = TRUE)\r\n    \r\n    quotes_df <- data$quotes\r\n    req(nrow(quotes_df) > 0)\r\n    \r\n    total_quotes <- nrow(quotes_df)\r\n    total_searches <- length(unique(quotes_df$`Número da Pesquisa`))\r\n    total_items <- data$item_count\r\n    \r\n    card_height <- \"83px\"\r\n    \r\n    bslib::layout_columns(\r\n      col_widths = c(4, 4, 4),\r\n      bslib::value_box(\r\n        title = \"Total de Pesquisas\",\r\n        value = total_searches,\r\n        showcase = icon(\"file-invoice\"),\r\n        theme = value_box_theme(bg = \"#1E8449\", fg = \"white\"),\r\n        height = card_height,\r\n        class = \"vertically-centered-card\"\r\n      ),\r\n      bslib::value_box(\r\n        title = \"Total de Itens\",\r\n        value = total_items,\r\n        showcase = icon(\"tag\"),\r\n        theme = value_box_theme(bg = \"#1E8449\", fg = \"white\"),\r\n        height = card_height,\r\n        class = \"vertically-centered-card\"\r\n      ),\r\n      bslib::value_box(\r\n        title = \"Total de Cotações\",\r\n        value = total_quotes,\r\n        showcase = icon(\"hand-holding-usd\"),\r\n        theme = value_box_theme(bg = \"#1E8449\", fg = \"white\"),\r\n        height = card_height,\r\n        class = \"vertically-centered-card\"\r\n      )\r\n    )\r\n  })\r\n  \r\n  output$summary_details_output <- renderText({\r\n    data <- processed_data_rv()\r\n    req(data, cancelOutput = TRUE)\r\n    \r\n    quotes_df <- data$quotes\r\n    req(nrow(quotes_df) > 0)\r\n    \r\n    first_quote <- head(quotes_df, 1)\r\n    last_quote <- tail(quotes_df, 1)\r\n    pesquisas_str <- paste(unique(quotes_df$`Número da Pesquisa`), collapse = \", \")\r\n    \r\n    paste(\r\n      paste(\"Arquivo Processado:\", input$pdf_file$name),\r\n      \"\\n------------------------------------\",\r\n      paste(\"Números das Pesquisas:\", pesquisas_str),\r\n      \"\\n------------------------------------\",\r\n      \"Primeira Cotação Encontrada:\",\r\n      paste(\"  - Fornecedor:\", first_quote$Nome),\r\n      paste(\"  - Data:\", first_quote$Data),\r\n      \"\\n\",\r\n      \"Última Cotação Encontrada:\",\r\n      paste(\"  - Fornecedor:\", last_quote$Nome),\r\n      paste(\"  - Data:\", last_quote$Data),\r\n      sep = \"\\n\"\r\n    )\r\n  })\r\n  \r\n  output$research_selector_ui <- renderUI({\r\n    data <- processed_data_rv()\r\n    req(data, nrow(data$quotes) > 0)\r\n    \r\n    choices <- unique(data$quotes$`Número da Pesquisa`)\r\n    selectInput(\"selected_research\", \"Selecione a Pesquisa:\", choices = choices, width = \"100%\")\r\n  })\r\n  \r\n  output$item_selector_ui <- renderUI({\r\n    data <- processed_data_rv()\r\n    req(data, input$selected_research, nrow(data$quotes) > 0)\r\n    \r\n    choices <- data$quotes %>%\r\n      filter(`Número da Pesquisa` == input$selected_research) %>%\r\n      pull(Item) %>%\r\n      unique() %>%\r\n      as.numeric() %>%\r\n      sort()\r\n    \r\n    selectInput(\"selected_item\", \"Selecione o Item:\", choices = choices, width = \"100%\")\r\n  })\r\n  \r\n  output$compoe_selector_ui <- renderUI({\r\n    req(input$selected_item)\r\n    selectInput(\"selected_compoe\", \"Filtrar por 'Compõe':\",\r\n                choices = c(\"Sim\", \"Não\", \"Todos\"),\r\n                selected = \"Sim\",\r\n                width = \"100%\")\r\n  })\r\n  \r\n  filtered_plot_data <- reactive({\r\n    data <- processed_data_rv()\r\n    req(data, input$selected_research, input$selected_item, input$selected_compoe, cancelOutput = TRUE)\r\n    \r\n    plot_data_base <- data$quotes %>%\r\n      filter(\r\n        `Número da Pesquisa` == input$selected_research,\r\n        Item == input$selected_item\r\n      )\r\n    \r\n    if (input$selected_compoe != \"Todos\") {\r\n      plot_data_final <- plot_data_base %>%\r\n        filter(Compõe == input$selected_compoe)\r\n    } else {\r\n      plot_data_final <- plot_data_base\r\n    }\r\n    \r\n    plot_data_final %>%\r\n      mutate(\r\n        `Preço unitário` = parse_br_number(`Preço unitário`),\r\n        Nome_curto = str_trim(str_split_i(Nome, \"\\\\s*-\\\\s*\", 1))\r\n      ) %>%\r\n      filter(!is.na(`Preço unitário`))\r\n  })\r\n  \r\n  # --- UI PARA CONTROLES DE DOWNLOAD (AJUSTADO) ---\r\n  output$download_controls_ui <- renderUI({\r\n    # A condição para mostrar o botão agora depende dos dados filtrados terem linhas\r\n    req(filtered_plot_data(), nrow(filtered_plot_data()) > 0, input$selected_research, input$selected_item)\r\n    \r\n    # Gera o nome do arquivo aqui para passar ao JavaScript\r\n    filename <- paste0(\"Grafico_Pesquisa_\", gsub('/', '-', input$selected_research), \r\n                       \"_Item_\", input$selected_item, \"_\", Sys.Date(), \".png\")\r\n    \r\n    # Adiciona um div para alinhar o botão verticalmente com os filtros\r\n    div(style = \"margin-top: 25px;\", \r\n        actionButton(\"download_plot_js\", \"Download do Gráfico\", \r\n                     icon = icon(\"camera\"), \r\n                     class = \"w-100 btn-success\",\r\n                     style = \"white-space: nowrap;\", # Garante texto em uma linha\r\n                     # Passa o nome do arquivo e o ID do botão para a função JS\r\n                     onclick = \"downloadOriginalPlot(this.id)\",\r\n                     `data-filename` = filename)\r\n    )\r\n  })\r\n  \r\n  # --- FUNÇÃO PARA GERAR O GRÁFICO (INALTERADA) ---\r\n  plot_generator <- function() {\r\n    plot_data <- filtered_plot_data()\r\n    # A validação de dados agora é feita antes, na UI, mas mantemos aqui por segurança\r\n    req(plot_data, nrow(plot_data) > 0)\r\n    \r\n    stats_data <- plot_data\r\n    mean_price <- if(nrow(stats_data) > 0) mean(stats_data$`Preço unitário`, na.rm = TRUE) else NA\r\n    median_price <- if(nrow(stats_data) > 0) median(stats_data$`Preço unitário`, na.rm = TRUE) else NA\r\n    \r\n    plot_data <- plot_data %>% arrange(desc(`Preço unitário`))\r\n    \r\n    op <- par(scipen = 999)\r\n    on.exit(par(op))\r\n    \r\n    item_info <- plot_data %>%\r\n      summarise(CATMAT = first(CATMAT), Descricao = first(`Descrição do Item`)) %>%\r\n      head(1)\r\n    \r\n    main_title <- paste(\"Preços Unitários para o Item:\", input$selected_item)\r\n    pesquisa_title <- paste(\"Pesquisa Nº:\", input$selected_research)\r\n    catmat_title <- paste(\"CATMAT:\", item_info$CATMAT)\r\n    desc_text <- paste(\"Descrição:\", item_info$Descricao)\r\n    \r\n    desc_wrapped <- strwrap(desc_text, width = 120)\r\n    num_desc_lines <- length(desc_wrapped)\r\n    \r\n    top_margin_lines <- 10 + num_desc_lines + 1\r\n    \r\n    plot_data$Nome_curto <- sapply(plot_data$Nome_curto, function(name) {\r\n      paste(strwrap(name, width = 60), collapse = \"\\n\")\r\n    })\r\n    \r\n    longest_line_after_wrap <- max(sapply(strsplit(plot_data$Nome_curto, \"\\n\"), function(lines) max(nchar(lines))))\r\n    left_margin_inches <- 0.07 * longest_line_after_wrap + 1.2\r\n    \r\n    left_margin_lines <- left_margin_inches / par(\"cin\")[2]\r\n    \r\n    par(mar = c(5.1, left_margin_lines, top_margin_lines, 4.1), family = \"sans\", bg = \"white\")\r\n    \r\n    colors <- ifelse(plot_data$Compõe == \"Sim\", \"#1E8449\", \"#6C757D\")\r\n    \r\n    bp <- barplot(plot_data$`Preço unitário`, horiz = TRUE,\r\n                  names.arg = plot_data$Nome_curto, las = 1,\r\n                  col = colors, border = NA,\r\n                  xlab = \"Preço Unitário (R$)\",\r\n                  cex.names = 0.8,\r\n                  xlim = c(0, max(plot_data$`Preço unitário`, na.rm = TRUE) * 1.35),\r\n                  axes = FALSE,\r\n                  space = 1.2)\r\n    \r\n    axis_ticks <- pretty(c(0, plot_data$`Preço unitário`))\r\n    axis(1, at = axis_ticks, labels = format_currency_br(axis_ticks))\r\n    \r\n    box(bty = \"l\")\r\n    \r\n    if(!is.na(mean_price))   abline(v = mean_price,   col = \"#E67E22\", lty = 2, lwd = 2)\r\n    if(!is.na(median_price)) abline(v = median_price, col = \"#428BCA\", lty = 2, lwd = 2)\r\n    \r\n    labels <- format_currency_br(plot_data$`Preço unitário`)\r\n    prices <- plot_data$`Preço unitário`\r\n    \r\n    text(x = prices, \r\n         y = bp,\r\n         label = labels,\r\n         col = \"black\",\r\n         pos = 4,\r\n         cex = 1.0)\r\n    \r\n    mtext(main_title,     side = 3, line = top_margin_lines - 2.5, adj = 0.35, cex = 1.4, font = 2)\r\n    mtext(pesquisa_title, side = 3, line = top_margin_lines - 3.7, adj = 0.0, cex = 1)\r\n    mtext(catmat_title,   side = 3, line = top_margin_lines - 4.9, adj = 0.0, cex = 0.9, font = 3)\r\n    for (i in seq_along(desc_wrapped)) {\r\n      mtext(desc_wrapped[[i]], side = 3, line = top_margin_lines - 4.9 - (i * 1.1), adj = 0.0, cex = 0.9, font = 3)\r\n    }\r\n    \r\n    mean_val_str   <- if(!is.na(mean_price))   format(round(mean_price,   2), nsmall = 2, decimal.mark = \",\") else \"N/A\"\r\n    median_val_str <- if(!is.na(median_price)) format(round(median_price, 2), nsmall = 2, decimal.mark = \",\") else \"N/A\"\r\n    \r\n    legend_labels <- c(\r\n      \"▰ Cotação Válida\",\r\n      \"▰ Descartada\",\r\n      paste(\"- - - Média: R$\", mean_val_str),\r\n      paste(\"- - - Mediana: R$\", median_val_str)\r\n    )\r\n    \r\n    legend_colors <- c(\"#1E8449\", \"#6C757D\", \"#E67E22\", \"#428BCA\")\r\n    \r\n    legend_line <- top_margin_lines - 4.9 - (num_desc_lines * 1.1) - 1.2\r\n    \r\n    adj_positions <- c(0.0, 0.25, 0.5, 0.85) \r\n    \r\n    for (i in seq_along(legend_labels)) {\r\n      mtext(legend_labels[[i]], side = 3, line = legend_line, adj = adj_positions[[i]], cex = 1.1, col = legend_colors[[i]])\r\n    }\r\n  }\r\n  \r\n  # --- LÓGICA DE PLOTAGEM (COM MENSAGEM PERSONALIZADA) ---\r\n  output$dynamic_plot_ui <- renderUI({\r\n    plot_data <- filtered_plot_data()\r\n    req(plot_data) \r\n    \r\n    # Se o filtro resultar em zero cotações, exibe a mensagem personalizada\r\n    if (nrow(plot_data) == 0) {\r\n      if (input$selected_compoe == \"Não\") {\r\n        return(\r\n          div(style = \"text-align: center; padding: 50px; color: grey;\",\r\n              h4(icon(\"info-circle\"), \" Nenhuma Cotação Encontrada\"),\r\n              p(\"Este item não possui cotações com o parâmetro Compõe = Não.\")\r\n          )\r\n        )\r\n      } else {\r\n        # Mensagem genérica para outros casos sem dados\r\n        return(\r\n          div(style = \"text-align: center; padding: 50px; color: grey;\",\r\n              h4(icon(\"info-circle\"), \" Nenhuma Cotação Encontrada\"),\r\n              p(\"Não há dados para exibir com os filtros selecionados.\")\r\n          )\r\n        )\r\n      }\r\n    } else {\r\n      # Se houver dados, mostra o gráfico normalmente\r\n      total_name_lines <- sum(sapply(strwrap(plot_data$Nome_curto, width = 60), length))\r\n      plot_height <- max(450, 150 + total_name_lines * 25)\r\n      return(plotOutput(\"price_plot\", height = paste0(plot_height, \"px\")))\r\n    }\r\n  })\r\n  \r\n  output$price_plot <- renderPlot({\r\n    # Esta função só será chamada se houver dados, por causa da lógica acima\r\n    plot_generator()\r\n  })\r\n}\r\n\r\n# ===================================================================================\r\n# INICIA A APLICAÇÃO SHINY\r\n# ===================================================================================\r\nshinyApp(ui, server)","type":"text"},{"name":"app.Rproj","content":"Version: 1.0\r\nProjectId: ecda188c-6086-4f8a-bdcf-277dce7cabaa\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
